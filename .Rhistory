#' @param DEdata
#'   A data frame of dose-effect data (typically, the output from
#'     \code{\link{dataprep}}) containing at least three variables:
#'     log10dose, bitpfx, and LWkeep.
#' @param constr
#'   A numeric vector of length two, indicating the constraints
#'     (see \code{\link{constrain}}) applied to the proportional effects,
#'     default c(0.001, 0.999).
#' @return
#'   A numeric vector of length two, the estimated intercept and slope.
#' @export
#' @import
#'   stats
#' @examples
#' conc <- c(0.0625, 0.125, 0.25, 0.5, 1)
#' numtested <- rep(8, 5)
#' nalive <- c(1, 4, 4, 7, 8)
#' mydat <- dataprep(dose=conc, ntot=numtested, nfx=nalive)
#' fitlinear(mydat)
fitlinear <- function(DEdata, constr=c(0.001, 0.999)) {
if (!is.data.frame(DEdata)) stop("DEdata must be a data frame.")
if (any(is.na(match(c("log10dose", "bitpfx", "LWkeep"), names(DEdata))))) {
stop("DEdata must include at least three variables:",
"log10dose, bitpfx, LWkeep.")
}
if (length(constr)!=2 | any(is.na(constr)) | !is.numeric(constr)) {
stop("constr must be a non-missing numeric vector of length 2")
}
cbitpfx <- constrain(DEdata$bitpfx, probit(constr))
lm(cbitpfx ~ log10dose, data=DEdata[DEdata$LWkeep, ])$coef
}
conc <- c(194, 324, 540)
numtested <- rep(24, 3)
numaffected <- c(0, 3, 24)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
x <- log10(conc)
y <- probit(numaffected/numtested)
y[1] <- probit(0.001)
y[3] <- probit(0.999)
constrain(y, probit(c(0.0001, 0.9999)))
plotDELP(mydat)
predLinesLP(fLW)
sv <- fitlinear(mydat)
abline(sv, col="red")
fLW
par("usr")
abline(h=probit(c(0.16, 0.84), col="blue")
abline(h=probit(c(0.16, 0.84)), col="blue")
1.094482e-09
format(1.094482e-09, sci=10)
0.1*20
0.1/100*20
0.92*10
conc <- c(1, 1.5, 2)
numtested <- rep(20, 3)
numaffected <- c(0, 2, 20)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
plotDELP(mydat)
predLinesLP(fLW)
sv <- fitlinear(mydat)
abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), col="blue")
fLW
format(1.47403e-08, sci=10)
?fitLWauto
?fitlinear
exp <- c(0.1, 16, 71)/100
lm(probit(exp) ~ log10(conc))
boogaard <- lm(probit(exp) ~ log10(conc))$coef
boogaard
plotDELP(mydat)
predLinesLP(fLW)
sv <- fitlinear(mydat)
abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
exp <- c(0.1, 16, 71)/100
boogaard <- lm(probit(exp) ~ log10(conc))$coef
abline(boogaard, col="blue")
plotDELP(mydat, xlab="TFM conc.")
predLinesLP(fLW)
sv <- fitlinear(mydat)
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
exp <- c(0.1, 16, 71)/100
boogaard <- lm(probit(exp) ~ log10(conc))$coef
abline(boogaard, col="blue")
assessfit(boogaard, simple=FALSE)
?assessfit
assessfit(boogaard, mydat, simple=FALSE)
fLW
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
fLW
invprobit(boogaard[1] + boogaard[2]*log10(2))
??binomial
?rbinom
pbinom(20, size=20, prob=exp2)
exp2 <- invprobit(boogaard[1] + boogaard[2]*log10(2))
pbinom(20, size=20, prob=exp2)
pbinom(14, size=20, prob=exp2)
rbinom(1, size=20, prob=exp2)
rbinom(1000, size=20, prob=exp2)
table(rbinom(1000, size=20, prob=exp2))
exp2 <- invprobit(boogaard[1] + boogaard[2]*log10(2))
rand <- rbinom(1000, size=20, prob=exp2)
table(rand>=20)
rand
mean(rand>19.5)
rand <- rbinom(1000, size=20, prob=exp2)
mean(rand>19.5)
rand <- rbinom(100000, size=20, prob=exp2)
mean(rand>19.5)
exp2 <- invprobit(boogaard[1] + boogaard[2]*log10(2))
rand <- rbinom(100000, size=20, prob=exp2)
100*mean(rand>19.5)
mean(rand>19.5)
100*mean(rand>19.5)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
predLinesLP(fLW)
sv <- fitlinear(mydat)
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
exp <- c(0.1, 16, 71)/100
boogaard <- lm(probit(exp) ~ log10(conc))$coef
abline(boogaard, col="blue")
assessfit(boogaard, mydat, simple=FALSE)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
fLW
exp2 <- invprobit(boogaard[1] + boogaard[2]*log10(2))
rand <- rbinom(100000, size=20, prob=0.9916009)
mean(rand>19.5)
100*mean(rand>19.5)
library(jvamisc)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library(jvamisc)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library("devtools")
search()
detach(2)
devtools::install_github("JVAdams/LW1949", build_vignettes=TRUE)
install.packages("MASS")
install.packages("mgcv")
install.packages("lattice")
library(LW1949)
vignette("Intro")
library(jvamisc)
?cheat
library(mvbutils)
foodweb("package:tcltk", "LWP")
library(tcltk)
library(LW1949)
foodweb("package:tcltk", "LWP")
foodweb("package:tcltk", prune="LWP")
tk_choose.files
?tk_choose.files
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library(LW1949)
library(testthat)
library(magrittr)
test_package(myPkg)
library(jvamisc)
tweethead(FALSE)
devtools::install_github("JVAdams/jvamisc")
library(jvamisc)
devtools::install_github("JVAdams/jvamisc")
library(jvamisc)
tweethead(FALSE)
??setup_twitter_oauth
install.packages("twitteR")
tweethead(FALSE)
library(jvamisc)
tweethead(FALSE)
library(twitteR)
tweethead(FALSE)
??getURLContent
install.packages("RCurl")
library(RCurl)
tweethead(FALSE)
library(jvamisc)
tweethead(FALSE)
library(twitteR)
tweethead(FALSE)
tweethead()
?cheat
library(mvbutils)
foodweb("package:RCurl", prune="tweethead")
search()
foodweb("package:twitteR", prune="tweethead")
foodweb("package:twitteR")
foodweb(where="package:twitteR", prune="tweethead")
??tweet
?tweet
?post
foodweb(where="package:RCurl", prune="tweethead")
source('C:/JVA/GitHub/jvamisc/R/tweethead.R', echo=TRUE)
search()
detach(5)
search()
detach(6)
tweethead(FALSE)
foodweb(where="package:devtools", prune="pkgin")
library(devtools)
foodweb(where="package:devtools", prune="pkgin")
?grconvertX
library(jvamisc)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library(LW1949)
library(testthat)
library(magrittr)
test_package(myPkg)
setwd("C:/JVA/GitHub/LW1949")
library(LW1949)
# supaverm data
conc <- c(194, 324, 540)
numtested <- rep(24, 3)
numaffected <- c(0, 3, 24)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
plotDELP(mydat)
predLinesLP(fLW)
sv <- fitlinear(mydat)
abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), col="blue")
plotDELP(mydat)
predLinesLP(fLW)
sv <- fitlinear(mydat)
abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), col="blue")
# TFM data
conc <- c(1, 1.5, 2)
numtested <- rep(20, 3)
numaffected <- c(0, 2, 20)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
predLinesLP(fLW)
sv <- fitlinear(mydat)
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
exp <- c(0.1, 16, 71)/100
boogaard <- lm(probit(exp) ~ log10(conc))$coef
abline(boogaard, col="blue")
assessfit(boogaard, mydat, simple=FALSE)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
predLines(fLW)
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
abline(boogaard, col="blue")
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
?predLines
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
predLines(fLW)
abline(h=probit(c(16, 84)), lwd=2, lty=2)
predLines(LWestimate(boogaard, mydat), col="blue")
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.", xlim=c(1, 2.6))
predLines(fLW)
abline(h=probit(c(16, 84)), lwd=2, lty=2)
predLines(LWestimate(boogaard, mydat), col="blue")
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
predLines(fLW)
abline(h=probit(c(16, 84)), lwd=2, lty=2)
predLines(LWestimate(boogaard, mydat), col="blue")
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
predLines(LWestimate(boogaard, mydat), col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
# TFM data
conc <- c(1, 1.5, 2)
numtested <- rep(20, 3)
numaffected <- c(0, 2, 20)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
sv <- fitlinear(mydat)
exp <- c(0.1, 16, 71)/100
boogaard <- lm(probit(exp) ~ log10(conc))$coef
assessfit(boogaard, mydat, simple=FALSE)
bb <- LWestimate(boogaard, mydat)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
#abline(boogaard, col="blue")
predLinesLP(bb, col="blue")
predLinesLP(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
predLines(bb, col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
#abline(boogaard, col="blue")
predLinesLP(bb, col="blue")
predLinesLP(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
predLines(bb, col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
library(LW1949)
# TFM data
conc <- c(1, 1.5, 2)
numtested <- rep(100, 3)
numaffected <- c(0, 16, 100)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
sv <- fitlinear(mydat)
# exp <- c(0.1, 16, 71)/100
# boogaard <- lm(probit(exp) ~ log10(conc))$coef
# assessfit(boogaard, mydat, simple=FALSE)
# bb <- LWestimate(boogaard, mydat)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
#abline(boogaard, col="blue")
#predLinesLP(bb, col="blue")
predLinesLP(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
#predLines(bb, col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
fLW
# TFM data
conc <- c(1, 1.5, 2)
numtested <- rep(100, 3)
numaffected <- c(0, 17, 100)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
sv <- fitlinear(mydat)
# exp <- c(0.1, 16, 71)/100
# boogaard <- lm(probit(exp) ~ log10(conc))$coef
# assessfit(boogaard, mydat, simple=FALSE)
# bb <- LWestimate(boogaard, mydat)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
#abline(boogaard, col="blue")
#predLinesLP(bb, col="blue")
predLinesLP(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
#predLines(bb, col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
?predprobit
predprobit(10, fLW)
predlinear(10, fLW)
predlinear(99.9, fLW)
predlinear(0.1, fLW)
fLW$params
exp2 <- invprobit(fLW$params[1] + fLW$params[2]*log10(1))
rand <- rbinom(100000, size=100, prob=exp2)
mean(rand<0.5)
100*mean(rand<0.5)
exp2 <- invprobit(fLW$params[1] + fLW$params[2]*log10(1))
exp2
format(exp2, sci=10)
source('C:/JVA/ASA/CSP SC/CSP2016/RegistrationCountGraph.R', echo=TRUE)
library(jvamisc)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library(LW1949)
library(testthat)
library(magrittr)
test_package(myPkg)
setwd("C:/JVA/GitHub/LW1949")
library(jvamisc)
devtools::install_github("JVAdams/LW1949", build_vignettes=TRUE)
library(LW1949)
vignette("Intro")
# TFM data
conc <- c(1, 1.5, 2)
numtested <- rep(100, 3)
numaffected <- c(0, 16, 100)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
sv <- fitlinear(mydat)
# exp <- c(0.1, 16, 71)/100
# boogaard <- lm(probit(exp) ~ log10(conc))$coef
# assessfit(boogaard, mydat, simple=FALSE)
# bb <- LWestimate(boogaard, mydat)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
#abline(boogaard, col="blue")
#predLinesLP(bb, col="blue")
predLinesLP(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
#predLines(bb, col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
library(LW1949)
# TFM data
conc <- c(1, 1.5, 2)
numtested <- rep(100, 3)
numaffected <- c(0, 16, 100)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numaffected)
intslope <- fitLWauto(mydat)
fLW <- LWestimate(intslope, mydat)
sv <- fitlinear(mydat)
# exp <- c(0.1, 16, 71)/100
# boogaard <- lm(probit(exp) ~ log10(conc))$coef
# assessfit(boogaard, mydat, simple=FALSE)
# bb <- LWestimate(boogaard, mydat)
par(mar=c(4, 4, 1, 1))
plotDELP(mydat, xlab="TFM conc.")
# abline(sv, col="red")
abline(h=probit(c(0.16, 0.84)), lwd=2, lty=2)
#abline(boogaard, col="blue")
#predLinesLP(bb, col="blue")
predLinesLP(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
par(mar=c(4, 4, 1, 1))
plotDE(mydat, xlab="TFM conc.")
#predLines(bb, col="blue")
predLines(fLW)
legend("topleft", c("LW1949", "hand"), lwd=c(2, 1), col=c("black", "blue"))
?optim
library(LW1949)
gamptable1()
gamtable1()
?dataprep
?fitLWauto
?LWestimate
?predlinear
?fitHand
?relPotency
?LWnomo1
LWnomo1()
choose(4, 2)
n <- 8
library(jvamisc)
binomCI(6)
binomCI(rep(0, 8))
1 - 0.05^(1/8)
binomCI(rep(8, 8))
binomCI(rep(1, 8))
log(0.5)/log(0.05)
log(0.05)/log(0.5)
1 - 0.05^(1/5)
library(jvamisc)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library(jvamisc)
cleanup()
myPkg <- "LW1949"
pkgup(myPkg)
pkgin(myPkg)
library(LW1949)
library(testthat)
library(magrittr)
test_package(myPkg)
library(jvamisc)
setwd("C:/JVA/GitHub/LW1949")
install.packages("gld")
R.Version()
gamtable1()
predict(0.3, gamtable1())
?gamtable1
correctval(c(0.37, 0.5, 0.63), gamtable1())
correctval(c(0.495, 0.505), gamtable1())
